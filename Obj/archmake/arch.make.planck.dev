#  *******************************************************************  #
#  I-Disorder Fortran Code                                              #
#                                                                       #
#  Written by Alexandre Reily Rocha and Pedro Brandimarte, 2007-2013    #
#                                                                       #
#  Copyright (c), All Rights Reserved                                   #
#                                                                       #
#  This program is free software. You can redistribute it and/or        #
#  modify it under the terms of the GNU General Public License          #
#  (version 3 or later) as published by the Free Software Foundation    #
#  <http://fsf.org/>.                                                   #
#                                                                       #
#  This program is distributed in the hope that it will be useful, but  #
#  WITHOUT ANY WARRANTY, without even the implied warranty of           #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU     #
#  General Public License for more details (file 'LICENSE_GPL'          #
#  distributed along with this program or at                            #
#  <http://www.gnu.org/licenses/gpl.html>).                             #
#  *******************************************************************  #
#  Description: options and machine archtecture specifications for      #
#  compiling.                                                           #
#                                                                       #
#  Written by Pedro Brandimarte, Sep 2013.                              #
#  Instituto de Fisica                                                  #
#  Universidade de Sao Paulo                                            #
#  e-mail: brandimarte@gmail.com                                        #
#  ***************************** HISTORY *****************************  #
#  Original version:    September 2013                                  #
#  *******************************************************************  #

# This string will be copied to the executable,
# so it pays to use something meaningful.
IDISORDER_ARCH = x86_64-unknown-linux

# Executable name.
EXEC = i-disorder.dev

# In case your compiler does not understand the special meaning of 
# the .F and .F90 extensions ("files in need of preprocessing"), you
# will need to use an explicit preprocessing step.
#FPP        = /opt/intel/composer_xe_2013.1.119/bin/intel64/fpp -P
#FPP_OUTPUT = 

# FC is typically the name of your fortran compiler. It is not always
# a good idea to add options here, except when they are essential for
# a proper operation. For example, here we request 64 bits and a special
# sub-compiler.
FC = mpif90

# CXX is typically the name of your c++ compiler. It is not always
# a good idea to add options here, except when they are essential for
# a proper operation. For example, here we request 64 bits and a special
# sub-compiler.
CXX = icpc

# The FC_SERIAL symbol is useful in at least two cases:
#   1. When the "MPI compiler environment" is so complex that it might
#      trick the configure scripts (for FoX at least).
#   2. When executables compiled with a (parallel) FC are flagged by 
#      the computer centers as "queuing-system-only". 
# Most utilities are thus compiled with FC_SERIAL, which in practice
# defaults to FC if it is not defined.
FC_SERIAL = ifort

# Here we should put mainly optimization flags.
FFLAGS = -O2 -xHost -traceback -C -fpe0 \
         -warn unused,truncated_source,uncalled,declarations,usage
CXXFLAGS = -O2 -xHost -traceback -C -Wall

# C++ standard.
CXX_LIBS = -lstdc++ 

# Some systems do not have 'ranlib'. If so,
# use "echo" instead of "ranlib".
RANLIB = ranlib

# A compiler-specific file holding special versions of some routines
# For most f95 compilers, "nag" should work. (The name is historical)
SYS = nag
#SYS = bsd

# These symbols should not need to be specified. They will be detected
# automatically at the time of compiling the MPI interface. Set them
# only if the automatic detection fails and you are sure of their values.
#SP_KIND = 4
#DP_KIND = 8
#KINDS   = $(SP_KIND) $(DP_KIND)

# Some compilers (notably IBM's) are not happy with the standard 
# syntax for definition of preprocessor symbols ( -DSOME_SYMBOL),
# and thy need a prefix (i.e. WF,-DSOME_SYMBOL). This is used
# in some utility makefiles.
#DEFS_PREFIX = -WF,

# Used only at the linking stage. For example, you might neeed "-static".
LDFLAGS = -static-intel -static-libgcc

# Extra flags for library creation by the 'ar' command
# Note that the 'ar' command can itself be specified by
# defining the AR variable. In most 'make' programs, AR is a
# built-in variable.
ARFLAGS_EXTRA =
AR = xiar

# These symbols help to keep the building rules concise
# (they are generated automatically by the 'configure' script
# in some cases).
FCFLAGS_fixed_f   =
FCFLAGS_free_f90  = 
FPPFLAGS_fixed_F  =
FPPFLAGS_free_F90 =

# This is the most installation-dependent part
# We can make things a bit easier by grouping symbols, and maybe
# using the -L flag to define search directories (see examples
# in 'siesta-3.1/Src/Sys' directory).
MKL              = /opt/intel/composer_xe_2013.0.079/mkl
INTEL_LIBS       = $(MKL)/lib/intel64/libmkl_intel_lp64.a \
                   $(MKL)/lib/intel64/libmkl_sequential.a \
                   $(MKL)/lib/intel64/libmkl_core.a \
                   $(MKL)/lib/intel64/libmkl_blacs_openmpi_lp64.a \
                   $(MKL)/lib/intel64/libmkl_scalapack_lp64.a
#                   $(MKL)/lib/intel64/libmkl_blas95_lp64.a \
#                   $(MKLROOT)/lib/intel64/libmkl_lapack95_lp64.a
MKL_LIBS         = -Wl,--start-group $(INTEL_LIBS) \
                   -Wl,--end-group -lpthread -lm
MKL_INCLUDE      = -I$(MKL)/include # -I$(MKL)/include/intel64/lp64
MKLDFT_INTERFACE = libmkl_dfti.a

# If you want to use GPUs, define the following.
# MAGMA, CUDA and CUBLAS libraries:
# This is truly the most installation-dependent part, really.
#CUDA_DIR    = /usr/local/cuda
#MAGMA_DIR   = /opt/magma
#MAGMA_LIB   = $(MAGMA_DIR)/lib/libmagma.a
#GPU_LIBS    = $(MAGMA_LIB) -L$(CUDA_DIR)/lib64 -lcublas -lcuda \
#              -lcudart -lstdc++
#GPU_INCLUDE = -I$(CUDA_DIR)/include -I$(MAGMA_DIR)/include
#GPU_DEFS    = -DFORTRAN -DMAGMA -DHAVE_CUBLAS

# If you are using a "wrapper compiler" such as
# mpif90, MPI_LIBS can be left empty. If not, you
# might need something like -Lsomepath/ -lmpi ...
MPI_LIBS = -L/opt/openmpi-1.6.4/lib64 -lmpi

# Even if you have an optimized system library (such as ESSL), you might
# not have all of LAPACK. In particular, the divide_and_conquer routines
# might not be available, or they might be buggy. 
# In this case, you need to compile them from source 
# (COMP stands for "compiled")
# If you do not have any optimized linear algebra library, you can
# specify COMP_LIBS=linalg.a
COMP_LIBS = 
#COMP_LIBS = dc_lapack.a 

# This (as well as the -DMPI definition) is essential for MPI support.
# SIESTA needs an F90 interface to MPI. This will give you SIESTA's own
# implementation. If your compiler vendor offers an alternative, you may
# change to it here.
#MPI_INTERFACE = libmpi_f90.a
MPI_INCLUDE = -I/opt/openmpi-1.6.4/include

# Preprocessor definitions or flags.
# Here we use FPPFLAGS (as 'configure' calls them), but historically
# it was very common to use DEFS. Try to use only FPPFLAGS from now on,
# converting any old arch.make files you might have lying around, and
# remember that you have to change the final building rules at the end
# to use only FPPFLAGS. DEFS is deprecated.

# MPI is self-explanatory. Remove the flag -DMASTER_SLAVE if
# you intends to run in serial mode (for Master-Slave scheme
# it is mandatory at least 2 nodes).
FPPFLAGS_MPI = -DMPI -DMASTER_SLAVE

# Uncomment to use GPUs with the MAGMA library
FPPFLAGS_GPU = $(GPU_DEFS)

# Debug (print tests).
FPPFLAGS_DEBUG = -DDEBUG

# Other definitions might be needed to work around some glitch in the
# compiler. For old versions of gfortran, add -DGFORTRAN.
FPPFLAGS = $(FPPFLAGS_MPI) $(FPPFLAGS_DEBUG) $(FPPFLAGS_GPU)

# All included flags.
INCFLAGS = $(MPI_INCLUDE) $(MKL_INCLUDE)

# We put here all the neeeded libraries.
# Sometimes the BLAS are included in LAPACK (or it could be
# that everything is included in SCALAPACK...). You might
# need to experiment if you find  duplicate symbols.
LIBS = $(GPU_LIBS) $(MKL_LIBS) $(MPI_LIBS) $(COMP_LIBS) $(CXX_LIBS)

# Dependency rules ---------

# Some compilers are not able to compile certain files with full
# optimization, or they produce wrong results if they do. For example,
# the PGI compiler has trouble with atom.f and electrostatic.f. In
# these cases, we need to insert extra lines. Use exactly the format
# shown, as it is general enough to work with VPATH.
FFLAGS_DEBUG = -g -O0

# Finally, the default building rules which will be used everywhere,
# unless overriden.
# These were created by a former run of 'configure'.
# See other examples in 'siesta-3.1/Src/Sys' directory. If you cut and
# paste, MAKE SURE that there are TABS, not spaces, at the beginning.
#
# Important points to note:
#  - INCFLAGS must be present. It is used in several utility makefiles
#  - Either FPPFLAGS (preferred) or DEFS (deprecated) must be present
#    (see above) -- Note that the use of DEFS might break Util compilations.
#  - If your compiler does not recognize .F and .F90 extensions as in
#    need of preprocessing, you will need to use an intermediate
#    preprocessing step (see above about FPP). For example:
##
#.F90.o:
#        $(FPP) $(FPPFLAGS) $< > tmp_$*.f90
#        $(FC) -c $(FFLAGS) $(INCFLAGS) tmp_$*.f90
#        @mv tmp_$*.o $*.o
#        @rm -f tmp_$*.f90
#
# Dependency rules are created by autoconf according to whether
# discrete preprocessing is necessary or not.
#
.F.o:
	$(FC) $(FFLAGS) -c $(INCFLAGS) $(FPPFLAGS) $(FPPFLAGS_fixed_F) $<
.F90.o:
	$(FC) $(FFLAGS) -c $(INCFLAGS) $(FPPFLAGS) $(FPPFLAGS_free_F90) $<
.f.o:
	$(FC) $(FFLAGS) -c $(INCFLAGS) $(FCFLAGS_fixed_f) $<
.f90.o:
	$(FC) $(FFLAGS) -c $(INCFLAGS) $(FCFLAGS_free_f90) $<
.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(FPPFLAGS_GPU) $(GPU_INCLUDE) $<
#
